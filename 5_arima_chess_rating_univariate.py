# -*- coding: utf-8 -*-
"""5-Arima - Chess Rating Univariate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19TcNVsEdMmQhKXsA3QfOPxalz0dQwNwv

https://github.com/stacktecnologias/stack-repo/blob/164cf328d0e007de260666d75a84bbf76defd2c3/Arima-Tutorial.ipynb

https://machinelearningmastery.com/make-sample-forecasts-arima-python/
"""

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.arima.model import ARIMA
from pandas.plotting import register_matplotlib_converters
register_matplotlib_converters()
from datetime import datetime
from dateutil.relativedelta import relativedelta

# load the dataset
df = pd.read_csv('/content/fiderating.csv')
df.set_index('Period', inplace=True)

l = ['niemann','keymer','sjugirov','deac','sargissian','xiong','abdusattorov','foreest','alekseenko','cheparinov','dubov','parham','pons','vidit','erigaisi','bu','shankland','gukesh','liem','andreikin']

allresults = pd.DataFrame() #novo dataframe para agrupar todos os jogadores
MAE=[]
RMSE=[]

for name in l:
  dataframe=df[df['Name']==name]
  dataframe = dataframe[[ 'Rating']]
  dataset = dataframe[[ 'Rating']]

  # create a differenced series
  def difference(dataset, interval=1):
	  diff = list()
	  for i in range(interval, len(dataset)):
		  value = dataset[i] - dataset[i - interval]
		  diff.append(value)
	  return np.array(diff)
 
  # invert differenced value
  def inverse_difference(history, yhat, interval=1):
	  return yhat + history[-interval]
 
  # load dataset
  series = dataframe
  # seasonal difference
  X = series.values
  m_in_year = 12
  differenced = difference(X, m_in_year)
  # fit model
  model = ARIMA(differenced, order=(7,0,1))
  model_fit = model.fit()
  # multi-step out-of-sample forecast
  forecast = model_fit.forecast(steps=7)
  # invert the differenced forecast to something usable
  history = [x for x in X]
  day = 1
  for yhat in forecast:
	  inverted = inverse_difference(history, yhat, m_in_year)
	  #print('Month %d: %f' % (day,inverted))
	  history.append(inverted)
	  day += 1
  
  #criando datas para a quantidade de predições
  data =[]
  dataframe=df[df['Name']==name]
  date = dataframe.index[-1]
  format = '%Y-%m-%d'
  dt = datetime.strptime(date, format)
  n_forecast = 6
  for i in range(n_forecast-1):
    next_month = dt.replace(day=1) + relativedelta(months=i+1)
    data.append(next_month.strftime('%Y-%m-%d'))
  #convertendo de numpy array para lista
  l=[]
  for item in history:
    l.append(str(item))

  pred = [x[1:-1] for x in l]
  pred_val = list(islice(reversed(pred), 0, n_forecast))
  pred_val.reverse()
  pred_val = str(res)

  #removendo caracteres indesejados
  pred_val = pred_val.replace("[", "")
  pred_val = pred_val.replace("]", "")
  pred_val = pred_val.replace("'", "")
  pred_val = pred_val.replace(" ", "")

  #converter para lista
  def Convert(string):
    li = list(string.split(","))
    return li
    
  pred_val = Convert(pred_val)

  #criando um dataframe com as novas datas e as predições
  df_pred = pd.DataFrame(list(zip(data, pred_val)),
               columns =['Period', 'Rating_Predicted'])
  df_pred['Name'] = name

  df_pred.Rating_Predicted = df_pred.Rating_Predicted.astype('float').round()

 
  #concatenando com os dados originais
  dataframe=df[df['Name']==name]
  df_original = dataframe[['Rating','Name']]
  df_pred = df_pred.set_index('Period')
  results = df_original.append(df_pred)

  #dataframe com todas previsoes
  allresults = allresults.append(df_pred)

# grafico dos dados históricos + predições
results[['Rating','Rating_Predicted']].plot(title='Fide Rating',figsize=(20,10))

allresults

dataset.count()

len(history)

name = 'nakamura'
dataframe=df[df['Name']==name]
dataframe = dataframe[[ 'Rating']]
dataset = dataframe[[ 'Rating']]

allresults = pd.DataFrame() #novo dataframe para agrupar todos os jogadores
MAE=[]
RMSE=[]

# create a differenced series
def difference(dataset, interval=1):
	diff = list()
	for i in range(interval, len(dataset)):
		value = dataset[i] - dataset[i - interval]
		diff.append(value)
	return np.array(diff)
 
# invert differenced value
def inverse_difference(history, yhat, interval=1):
	return yhat + history[-interval]
 
# load dataset
series = dataframe
# seasonal difference
X = series.values
m_in_year = 12
differenced = difference(X, m_in_year)
# fit model
model = ARIMA(differenced, order=(7,0,1))
model_fit = model.fit()
# multi-step out-of-sample forecast
forecast = model_fit.forecast(steps=7)
# invert the differenced forecast to something usable
history = [x for x in X]
day = 1
for yhat in forecast:
	inverted = inverse_difference(history, yhat, m_in_year)
	print('Month %d: %f' % (day,inverted))
	history.append(inverted)
	day += 1
#criando datas para a quantidade de predições
data =[]
dataframe=df[df['Name']==name]
date = dataframe.index[-1]
format = '%Y-%m-%d'
dt = datetime.strptime(date, format)
n_forecast = 5
for i in range(n_forecast-1):
    next_month = dt.replace(day=1) + relativedelta(months=i+1)
    data.append(next_month.strftime('%Y-%m-%d'))
#convertendo de numpy array para lista
l=[]
for item in history:
    l.append(str(item))

pred = [x[1:-1] for x in l]
pred_val = list(islice(reversed(pred), 0, n_forecast))
pred_val.reverse()
pred_val = str(res)

#removendo caracteres indesejados
pred_val = pred_val.replace("[", "")
pred_val = pred_val.replace("]", "")
pred_val = pred_val.replace("'", "")
pred_val = pred_val.replace(" ", "")

#converter para lista
def Convert(string):
    li = list(string.split(","))
    return li
    
pred_val = Convert(pred_val)

#criando um dataframe com as novas datas e as predições
df_pred = pd.DataFrame(list(zip(data, pred_val)),
               columns =['Period', 'Rating_Predicted'])
df_pred['Name'] = name

df_pred.Rating_Predicted = df_pred.Rating_Predicted.astype('float').round()

 
#concatenando com os dados originais
dataframe=df[df['Name']==name]
df_original = dataframe[['Rating','Name']]
df_pred = df_pred.set_index('Period')
results = df_original.append(df_pred)

#dataframe com todas previsoes
allresults = allresults.append(df_pred)

# grafico dos dados históricos + predições
results[['Rating','Rating_Predicted']].plot(title='Fide Rating',figsize=(20,10))

results
